{"ast":null,"code":"var _jsxFileName = \"/Users/trabajo/Desktop/ELRINCON/react-rincon/src/controllers/profileController.js\";\nimport React, { Component } from 'react';\nimport ProfessionalService from '../services/professional.service';\nimport DepartmentService from '../services/department.service';\nimport TutorService from '../services/tutor.service';\nimport RoleService from '../services/role.service';\nimport ImageService from '../services/image.service';\nimport ProfileController from '../controllers/profileController';\nimport Swal from 'sweetalert2';\nimport { data } from 'jquery';\n\nclass profileController {\n  constructor() {\n    this.state = {\n      email: sessionStorage.getItem(\"userEmail\"),\n      response: {},\n      departments: {},\n      roles: {},\n      tutors: {},\n      myImage: {\n        name: null,\n        type: null,\n        data: null\n      },\n      correctlyCreated: \"false\"\n    };\n  }\n\n  async loadUserId() {\n    await ProfessionalService.getWithEmail({\n      email: this.state.email\n    }).then(res => {\n      if (res.data.success) {\n        this.state.response = {\n          redirect: \"/\"\n        };\n      } else {\n        this.state.response = {\n          allowCreation: true\n        };\n      }\n    }).catch(err => {\n      console.error('ERROR server' + err);\n    });\n    return this.state.response;\n  }\n\n  async queryProfessionals() {\n    let myState = {};\n    await ProfessionalService.getWithEmail({\n      email: this.state.email\n    }).then(async res => {\n      if (res.data.success) {\n        const {\n          id,\n          name,\n          departmentId,\n          roleId,\n          tutorId,\n          comment,\n          imageId\n        } = res.data.data[0];\n        myState = {\n          id: id,\n          name: name,\n          departmentId: departmentId,\n          roleId: roleId,\n          tutorId: tutorId,\n          comment: comment,\n          imageId: imageId\n        };\n\n        if (imageId != null) {\n          await ImageService.get(imageId).then(res => {\n            myState.image = this.cargarImagenDeBBDD(res.data.data[0]);\n          }).catch(err => {\n            console.error('ERROR server ' + err);\n          });\n        } else {\n          console.error('No hay imagen asociada a esta cuenta.');\n        }\n      } else {\n        console.error('Error quering professional EDIT');\n      }\n    }).catch(err => {\n      console.error('ERROR server' + err);\n    });\n    return myState;\n  }\n\n  cargarImagenDeBBDD(imagenDeBBDD) {\n    let bufferOriginal = null;\n\n    if (imagenDeBBDD.type.includes(\"image\")) {\n      //Pasar buffer a string\n      bufferOriginal = Buffer.from(imagenDeBBDD.data); //Pasar buffer a formato utf\n\n      imagenDeBBDD.data = bufferOriginal.toString('utf8');\n    } else {\n      Swal.fire({\n        position: 'top',\n        icon: 'error',\n        title: 'Sólo archivos de tipo imagen!',\n        showConfirmButton: false,\n        timer: 2000\n      });\n    }\n\n    return imagenDeBBDD;\n  }\n\n  async queryDepartments() {\n    await DepartmentService.getAll().then(res => {\n      if (res.data.success) {\n        const data = res.data.data;\n        this.state.departments = data;\n      } else {\n        console.error('Error web service');\n      }\n    }).catch(err => {\n      console.error('ERROR server' + err);\n    });\n  }\n\n  async queryRoles() {\n    await RoleService.getAll().then(res => {\n      if (res.data.success) {\n        const data = res.data.data;\n        this.state.roles = data;\n      } else {\n        console.error('Error web service');\n      }\n    }).catch(err => {\n      console.error('ERROR server' + err);\n    });\n  }\n\n  async queryTutors() {\n    await TutorService.getAll().then(res => {\n      if (res.data.success) {\n        const data = res.data.data;\n        this.state.tutors = data;\n      } else {\n        console.error('Error web service');\n      }\n    }).catch(err => {\n      console.error('ERROR server' + err);\n    });\n    return this.state.tutors;\n  }\n\n  async loadDepartments() {\n    await this.queryDepartments();\n    return this.state.departments.map(data => {\n      if (data) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: data.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }\n        }, data.name);\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 24\n          }\n        });\n      }\n    });\n  }\n\n  async loadRoles() {\n    await this.queryRoles();\n    return this.state.roles.map(data => {\n      if (data) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: data.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }\n        }, data.name);\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 24\n          }\n        });\n      }\n    });\n  }\n\n  async loadTutors() {\n    await this.queryTutors();\n    return this.state.tutors.map(data => {\n      if (data) {\n        return /*#__PURE__*/React.createElement(\"option\", {\n          value: data.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 21\n          }\n        }, data.name);\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 24\n          }\n        });\n      }\n    });\n  }\n\n  validateFields(nombre, departamentoId, roleId) {\n    let emptyFields = \"\";\n    let count = 0;\n\n    if (nombre.replace(/\\s/g, \"\").length == 0) {\n      emptyFields += \" Nombre \";\n      count++;\n    }\n\n    if (departamentoId == null) {\n      emptyFields += \" Departamento \";\n      count++;\n    }\n\n    if (roleId == null) {\n      emptyFields += \" Rol \";\n      count++;\n    } //If there are errors\n\n\n    if (count > 0) {\n      Swal.fire({\n        position: 'center',\n        icon: 'error',\n        title: (count == 1 ? \"Falta el campo\" : \"Faltan los campos: \") + emptyFields,\n        showConfirmButton: false,\n        timer: 2000\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  async addProfessional(datapost) {\n    const {\n      name,\n      departmentId,\n      roleId\n    } = datapost;\n\n    if (this.validateFields(name, departmentId, roleId) == false) {\n      return;\n    }\n\n    await ProfessionalService.create(datapost).then(async res => {\n      if (res.data.success) {\n        await Swal.fire({\n          position: 'top',\n          icon: 'success',\n          title: '¡Enhorabuena, ya tiene perfil!',\n          showConfirmButton: false,\n          timer: 2000\n        });\n        this.state.correctlyCreated = \"true\";\n      } else {\n        console.error(\"Error creating professional\");\n      }\n    }).catch(error => {\n      console.error(\"Error 34 \" + error);\n    });\n    return this.state.correctlyCreated;\n  }\n\n  async readURL(input) {\n    if (input.files && input.files[0]) {\n      const myValue = input.files[0];\n\n      if (myValue.type.includes(\"image\")) {\n        const reader = new FileReader();\n        await reader.readAsDataURL(myValue);\n\n        reader.onload = async event => {\n          console.log('LEO DATOS');\n          this.state.myImage.data = await event.target.result;\n          this.state.myImage.name = myValue.name;\n          this.state.myImage.type = myValue.type;\n        };\n\n        reader.onerror = err => {\n          console.error('Error en lectura de imagen --> ' + err);\n        };\n      } else {\n        Swal.fire({\n          position: 'top',\n          icon: 'error',\n          title: 'Sólo archivos de tipo imagen!',\n          showConfirmButton: false,\n          timer: 2000\n        });\n      }\n    }\n\n    console.log('PASO DATOS');\n    console.log(this.state.myImage);\n    return this.state.myImage;\n  }\n\n}\n\nexport default new profileController();","map":{"version":3,"sources":["/Users/trabajo/Desktop/ELRINCON/react-rincon/src/controllers/profileController.js"],"names":["React","Component","ProfessionalService","DepartmentService","TutorService","RoleService","ImageService","ProfileController","Swal","data","profileController","constructor","state","email","sessionStorage","getItem","response","departments","roles","tutors","myImage","name","type","correctlyCreated","loadUserId","getWithEmail","then","res","success","redirect","allowCreation","catch","err","console","error","queryProfessionals","myState","id","departmentId","roleId","tutorId","comment","imageId","get","image","cargarImagenDeBBDD","imagenDeBBDD","bufferOriginal","includes","Buffer","from","toString","fire","position","icon","title","showConfirmButton","timer","queryDepartments","getAll","queryRoles","queryTutors","loadDepartments","map","loadRoles","loadTutors","validateFields","nombre","departamentoId","emptyFields","count","replace","length","addProfessional","datapost","create","readURL","input","files","myValue","reader","FileReader","readAsDataURL","onload","event","log","target","result","onerror"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ProfessionalService from '../services/professional.service';\nimport DepartmentService from '../services/department.service';\nimport TutorService from '../services/tutor.service';\nimport RoleService from '../services/role.service';\nimport ImageService from '../services/image.service';\nimport ProfileController from '../controllers/profileController';\n\nimport Swal from 'sweetalert2';\nimport { data } from 'jquery';\n\nclass profileController {\n    constructor() {\n        this.state = {\n            email: sessionStorage.getItem(\"userEmail\"),\n            response: {},\n            departments: {},\n            roles: {},\n            tutors: {},\n            myImage: {\n                name: null,\n                type: null,\n                data: null\n            },\n            correctlyCreated: \"false\"\n        }\n    }\n\n    async loadUserId() {\n        await ProfessionalService.getWithEmail({ email: this.state.email })\n            .then(res => {\n                if (res.data.success) {\n                    this.state.response = { redirect: \"/\" };\n                } else {\n                    this.state.response = { allowCreation: true };\n                }\n            })\n            .catch(err => {\n                console.error('ERROR server' + err);\n            });\n        return this.state.response;\n    }\n\n    async queryProfessionals() {\n        let myState = {};\n        await ProfessionalService.getWithEmail({ email: this.state.email })\n            .then(async res => {\n                if (res.data.success) {\n                    const { id, name, departmentId, roleId, tutorId, comment, imageId } = res.data.data[0];\n\n                    myState = {\n                        id: id,\n                        name: name,\n                        departmentId: departmentId,\n                        roleId: roleId,\n                        tutorId: tutorId,\n                        comment: comment,\n                        imageId: imageId\n                    };\n\n                    if (imageId != null) {\n                        await ImageService.get(imageId).then(res => {\n                            myState.image = this.cargarImagenDeBBDD(res.data.data[0]);\n                        }).catch(err => {\n                            console.error('ERROR server ' + err);\n                        });\n                    } else {\n                        console.error('No hay imagen asociada a esta cuenta.');\n\n                    }\n                } else {\n                    console.error('Error quering professional EDIT');\n                }\n            })\n            .catch(err => {\n                console.error('ERROR server' + err);\n            });\n        return myState;\n    }\n\n    cargarImagenDeBBDD(imagenDeBBDD) {\n        let bufferOriginal = null;\n        if (imagenDeBBDD.type.includes(\"image\")) {\n            //Pasar buffer a string\n            bufferOriginal = Buffer.from(imagenDeBBDD.data);\n            //Pasar buffer a formato utf\n            imagenDeBBDD.data = bufferOriginal.toString('utf8');\n        } else {\n            Swal.fire({\n                position: 'top',\n                icon: 'error',\n                title: 'Sólo archivos de tipo imagen!',\n                showConfirmButton: false,\n                timer: 2000\n            })\n        }\n        return imagenDeBBDD;\n    }\n\n    async queryDepartments() {\n        await DepartmentService.getAll()\n            .then(res => {\n                if (res.data.success) {\n                    const data = res.data.data;\n                    this.state.departments = data;\n                } else {\n                    console.error('Error web service');\n                }\n            })\n            .catch(err => {\n                console.error('ERROR server' + err);\n            });\n    }\n\n    async queryRoles() {\n        await RoleService.getAll()\n            .then(res => {\n                if (res.data.success) {\n                    const data = res.data.data;\n                    this.state.roles = data;\n                } else {\n                    console.error('Error web service');\n                }\n            })\n            .catch(err => {\n                console.error('ERROR server' + err);\n            });\n        \n    }\n\n    async queryTutors() {\n        await TutorService.getAll()\n            .then(res => {\n                if (res.data.success) {\n                    const data = res.data.data;\n                    this.state.tutors = data;\n                } else {\n                    console.error('Error web service');\n                }\n            })\n            .catch(err => {\n                console.error('ERROR server' + err);\n            });\n        return this.state.tutors;\n    }\n\n    async loadDepartments() {\n        await this.queryDepartments();\n        return this.state.departments.map(data => {\n            if (data) {\n                return (\n                    <option value={data.id}>{data.name}</option>\n                );\n            } else {\n                return <div></div>;\n            }\n        });\n    }\n\n    async loadRoles() {\n        await this.queryRoles();\n        return this.state.roles.map(data => {\n            if (data) {\n                return (\n                    <option value={data.id}>{data.name}</option>\n                );\n            } else {\n                return <div></div>;\n            }\n        });\n    }\n\n    async loadTutors() {\n        await this.queryTutors();\n        return this.state.tutors.map(data => {\n            if (data) {\n                return (\n                    <option value={data.id}>{data.name}</option>\n                );\n            } else {\n                return <div></div>;\n            }\n        });\n    }\n\n    validateFields(nombre,departamentoId,roleId) {\n        let emptyFields = \"\";\n        let count = 0;\n\n        if (nombre.replace(/\\s/g, \"\").length == 0) {\n            emptyFields += \" Nombre \";\n            count++;\n        }\n        if (departamentoId== null) {\n            emptyFields += \" Departamento \";\n            count++;\n        }\n        if (roleId == null) {\n            emptyFields += \" Rol \";\n            count++;\n        }\n\n        //If there are errors\n        if (count > 0) {\n            Swal.fire({\n                position: 'center',\n                icon: 'error',\n                title: (count == 1 ? \"Falta el campo\" : \"Faltan los campos: \") + emptyFields,\n                showConfirmButton: false,\n                timer: 2000\n            })\n            return false;\n        } else {\n            return true;\n        }\n\n    }\n\n    async addProfessional(datapost) {\n        const {name,departmentId,roleId} = datapost;\n        if (this.validateFields(name,departmentId,roleId) == false) {\n            return;\n        }\n\n        await ProfessionalService.create(datapost)\n            .then(async res => {\n                if (res.data.success) {\n                    await Swal.fire({\n                        position: 'top',\n                        icon: 'success',\n                        title: '¡Enhorabuena, ya tiene perfil!',\n                        showConfirmButton: false,\n                        timer: 2000\n                    })\n                    this.state.correctlyCreated= \"true\" ;\n                }\n                else {\n                    console.error(\"Error creating professional\");\n                }\n            }).catch(error => {\n                console.error(\"Error 34 \" + error);\n            });\n\n        return this.state.correctlyCreated;\n    }\n\n   async readURL(input) {\n        if (input.files && input.files[0]) {\n            const myValue = input.files[0];\n\n            if (myValue.type.includes(\"image\")) {\n                const reader = new FileReader();\n                await reader.readAsDataURL(myValue); \n\n                reader.onload = async (event) => {\n                    console.log('LEO DATOS');\n                    this.state.myImage.data = await event.target.result;\n                    this.state.myImage.name = myValue.name;\n                    this.state.myImage.type = myValue.type;\n                }\n                reader.onerror = (err) => {\n                    console.error('Error en lectura de imagen --> '+err);\n                }\n            } else {\n                Swal.fire({\n                    position: 'top',\n                    icon: 'error',\n                    title: 'Sólo archivos de tipo imagen!',\n                    showConfirmButton: false,\n                    timer: 2000\n                })\n            }\n        }\n        console.log('PASO DATOS');\n        console.log(this.state.myImage);\n        return this.state.myImage;\n    }\n\n}\nexport default new profileController();"]},"metadata":{},"sourceType":"module"}