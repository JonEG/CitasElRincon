{"ast":null,"code":"'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\n\nconst ResourceLock = require('./resource-lock');\n\nconst Promise = require('../../promise');\n\nconst {\n  logger\n} = require('../../utils/logger');\n\nconst sequelizeErrors = require('../../errors');\n\nconst DataTypes = require('../../data-types').mssql;\n\nconst parserStore = require('../parserStore')('mssql');\n\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('tedious');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username || undefined,\n          password: config.password || undefined\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        encrypt: false\n      }\n    };\n\n    if (config.dialectOptions) {\n      // only set port if no instance name was provided\n      if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {\n        delete connectionConfig.options.port;\n      }\n\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n\n    return new Promise((resolve, reject) => {\n      const connection = new this.lib.Connection(connectionConfig);\n\n      if (connection.state === connection.STATE.INITIALIZED) {\n        connection.connect();\n      }\n\n      connection.lib = this.lib;\n      const resourceLock = new ResourceLock(connection);\n\n      const connectHandler = error => {\n        connection.removeListener('end', endHandler);\n        connection.removeListener('error', errorHandler);\n        if (error) return reject(error);\n        debug('connection acquired');\n        resolve(resourceLock);\n      };\n\n      const endHandler = () => {\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('error', errorHandler);\n        reject(new Error('Connection was closed by remote server'));\n      };\n\n      const errorHandler = error => {\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('end', endHandler);\n        reject(error);\n      };\n\n      connection.once('error', errorHandler);\n      connection.once('end', endHandler);\n      connection.once('connect', connectHandler);\n      /*\n       * Permanently attach this event before connection is even acquired\n       * tedious sometime emits error even after connect(with error).\n       *\n       * If we dont attach this even that unexpected error event will crash node process\n       *\n       * E.g. connectTimeout is set higher than requestTimeout\n       */\n\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n            this.pool.destroy(resourceLock);\n        }\n      });\n\n      if (config.dialectOptions && config.dialectOptions.debug) {\n        connection.on('debug', debugTedious.log.bind(debugTedious));\n      }\n    }).catch(error => {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n\n          throw new sequelizeErrors.ConnectionError(error);\n\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new sequelizeErrors.AccessDeniedError(error);\n\n        case 'EINVAL':\n          throw new sequelizeErrors.InvalidConnectionError(error);\n\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    });\n  }\n\n  disconnect(connectionLock) {\n    /**\n     * Abstract connection may try to disconnect raw connection used for fetching version\n     */\n    const connection = connectionLock.unwrap ? connectionLock.unwrap() : connectionLock; // Don't disconnect a connection that is already disconnected\n\n    if (connection.closed) {\n      return Promise.resolve();\n    }\n\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connectionLock) {\n    /**\n     * Abstract connection may try to validate raw connection used for fetching version\n     */\n    const connection = connectionLock.unwrap ? connectionLock.unwrap() : connectionLock;\n    return connection && connection.loggedIn;\n  }\n\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"sources":["/Users/trabajo/Desktop/ELRINCON/react-rincon/node_modules/sequelize/lib/dialects/mssql/connection-manager.js"],"names":["AbstractConnectionManager","require","ResourceLock","Promise","logger","sequelizeErrors","DataTypes","mssql","parserStore","debug","debugContext","debugTedious","ConnectionManager","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","connect","connectionConfig","server","host","authentication","type","options","userName","username","undefined","password","parseInt","database","encrypt","dialectOptions","instanceName","Object","assign","resolve","reject","connection","Connection","state","STATE","INITIALIZED","resourceLock","connectHandler","error","removeListener","endHandler","errorHandler","Error","once","on","code","pool","destroy","log","bind","catch","ConnectionError","message","includes","HostNotReachableError","HostNotFoundError","ConnectionRefusedError","AccessDeniedError","InvalidConnectionError","disconnect","connectionLock","unwrap","closed","close","validate","loggedIn","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst ResourceLock = require('./resource-lock');\nconst Promise = require('../../promise');\nconst { logger } = require('../../utils/logger');\nconst sequelizeErrors = require('../../errors');\nconst DataTypes = require('../../data-types').mssql;\nconst parserStore = require('../parserStore')('mssql');\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('tedious');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username || undefined,\n          password: config.password || undefined\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        encrypt: false\n      }\n    };\n\n    if (config.dialectOptions) {\n      // only set port if no instance name was provided\n      if (\n        config.dialectOptions.options &&\n        config.dialectOptions.options.instanceName\n      ) {\n        delete connectionConfig.options.port;\n      }\n\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n\n    return new Promise((resolve, reject) => {\n      const connection = new this.lib.Connection(connectionConfig);\n      if (connection.state === connection.STATE.INITIALIZED) {\n        connection.connect();\n      }\n      connection.lib = this.lib;\n      const resourceLock = new ResourceLock(connection);\n\n      const connectHandler = error => {\n        connection.removeListener('end', endHandler);\n        connection.removeListener('error', errorHandler);\n\n        if (error) return reject(error);\n\n        debug('connection acquired');\n        resolve(resourceLock);\n      };\n\n      const endHandler = () => {\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('error', errorHandler);\n        reject(new Error('Connection was closed by remote server'));\n      };\n\n      const errorHandler = error => {\n        connection.removeListener('connect', connectHandler);\n        connection.removeListener('end', endHandler);\n        reject(error);\n      };\n\n      connection.once('error', errorHandler);\n      connection.once('end', endHandler);\n      connection.once('connect', connectHandler);\n\n      /*\n       * Permanently attach this event before connection is even acquired\n       * tedious sometime emits error even after connect(with error).\n       *\n       * If we dont attach this even that unexpected error event will crash node process\n       *\n       * E.g. connectTimeout is set higher than requestTimeout\n       */\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n            this.pool.destroy(resourceLock);\n        }\n      });\n\n      if (config.dialectOptions && config.dialectOptions.debug) {\n        connection.on('debug', debugTedious.log.bind(debugTedious));\n      }\n    }).catch(error => {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n          throw new sequelizeErrors.ConnectionError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new sequelizeErrors.AccessDeniedError(error);\n        case 'EINVAL':\n          throw new sequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    });\n  }\n\n  disconnect(connectionLock) {\n    /**\n     * Abstract connection may try to disconnect raw connection used for fetching version\n     */\n    const connection = connectionLock.unwrap\n      ? connectionLock.unwrap()\n      : connectionLock;\n\n    // Don't disconnect a connection that is already disconnected\n    if (connection.closed) {\n      return Promise.resolve();\n    }\n\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connectionLock) {\n    /**\n     * Abstract connection may try to validate raw connection used for fetching version\n     */\n    const connection = connectionLock.unwrap\n      ? connectionLock.unwrap()\n      : connectionLock;\n\n    return connection && connection.loggedIn;\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"]},"metadata":{},"sourceType":"script"}