{"ast":null,"code":"import ProfessionalService from '../services/professional.service';\nimport TimetableService from '../services/timetable.service';\nimport Swal from 'sweetalert2';\n\nclass timetableController {\n  constructor() {\n    this.handleChange = async (time, day, dayData) => {\n      if (time == null) return;\n      const filteredTime = await String(time).match(/\\d{2}:\\d{2}/g)[0];\n\n      if (day == \"from\") {\n        dayData.myDateFrom = time;\n        dayData.from = filteredTime;\n      } else if (day == \"to\") {\n        dayData.myDateTo = time;\n        dayData.to = filteredTime;\n      }\n\n      return dayData;\n    };\n  }\n\n  async updateTimetable(data, tableId, myUser) {\n    let updated = false;\n\n    if (tableId == null) {\n      await TimetableService.create(data).then(res => {\n        myUser.timetableId = res.data.id;\n        ProfessionalService.update(myUser).then(() => {\n          Swal.fire({\n            toast: true,\n            title: \"Horario actualizado\",\n            position: 'top-end',\n            icon: 'success',\n            showConfirmButton: false,\n            timer: 2000\n          });\n          updated = true; //this.setState({ reloadTable: true })\n        }).catch(error => console.error(\"error creating timetable \" + error));\n      }).catch(error => console.error(\"error creating timetable \" + error));\n    } else {\n      await TimetableService.update(data).then(res => {\n        if (res.data.success == true) {\n          //this.setState({ reloadTable: true })\n          Swal.fire({\n            toast: true,\n            title: \"Horario actualizado\",\n            position: 'top-end',\n            icon: 'success',\n            showConfirmButton: false,\n            timer: 2000\n          });\n          updated = true;\n        }\n      }).catch(error => console.error(\"error actualizando timetable \" + error));\n    }\n\n    return updated;\n  }\n\n}\n\nexport default new timetableController();","map":{"version":3,"sources":["/Users/trabajo/Desktop/ELRINCON/react-rincon/src/controllers/timetableController.js"],"names":["ProfessionalService","TimetableService","Swal","timetableController","constructor","handleChange","time","day","dayData","filteredTime","String","match","myDateFrom","from","myDateTo","to","updateTimetable","data","tableId","myUser","updated","create","then","res","timetableId","id","update","fire","toast","title","position","icon","showConfirmButton","timer","catch","error","console","success"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,kCAAhC;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,GAAG;AAAA,SAGdC,YAHc,GAGC,OAAOC,IAAP,EAAaC,GAAb,EAAkBC,OAAlB,KAA8B;AACzC,UAAIF,IAAI,IAAI,IAAZ,EAAkB;AAClB,YAAMG,YAAY,GAAG,MAAMC,MAAM,CAACJ,IAAD,CAAN,CAAaK,KAAb,CAAmB,cAAnB,EAAmC,CAAnC,CAA3B;;AACA,UAAIJ,GAAG,IAAI,MAAX,EAAmB;AACfC,QAAAA,OAAO,CAACI,UAAR,GAAqBN,IAArB;AACAE,QAAAA,OAAO,CAACK,IAAR,GAAeJ,YAAf;AACH,OAHD,MAGO,IAAIF,GAAG,IAAI,IAAX,EAAiB;AACpBC,QAAAA,OAAO,CAACM,QAAR,GAAmBR,IAAnB;AACAE,QAAAA,OAAO,CAACO,EAAR,GAAaN,YAAb;AACH;;AACD,aAAOD,OAAP;AACH,KAda;AACb;;AAeD,QAAMQ,eAAN,CAAsBC,IAAtB,EAA2BC,OAA3B,EAAmCC,MAAnC,EAA2C;AACvC,QAAIC,OAAO,GAAG,KAAd;;AACA,QAAIF,OAAO,IAAI,IAAf,EAAqB;AACjB,YAAMjB,gBAAgB,CAACoB,MAAjB,CAAwBJ,IAAxB,EAA8BK,IAA9B,CAAoCC,GAAD,IAAS;AAC9CJ,QAAAA,MAAM,CAACK,WAAP,GAAqBD,GAAG,CAACN,IAAJ,CAASQ,EAA9B;AACAzB,QAAAA,mBAAmB,CAAC0B,MAApB,CAA2BP,MAA3B,EAAmCG,IAAnC,CAAwC,MAAM;AAC1CpB,UAAAA,IAAI,CAACyB,IAAL,CAAU;AACNC,YAAAA,KAAK,EAAE,IADD;AAENC,YAAAA,KAAK,EAAE,qBAFD;AAGNC,YAAAA,QAAQ,EAAE,SAHJ;AAINC,YAAAA,IAAI,EAAE,SAJA;AAKNC,YAAAA,iBAAiB,EAAE,KALb;AAMNC,YAAAA,KAAK,EAAE;AAND,WAAV;AAQAb,UAAAA,OAAO,GAAC,IAAR,CAT0C,CAU1C;AACH,SAXD,EAWGc,KAXH,CAWUC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAe,8BAA4BA,KAA3C,CAXpB;AAaH,OAfK,EAeHD,KAfG,CAeIC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAe,8BAA4BA,KAA3C,CAfd,CAAN;AAgBH,KAjBD,MAiBO;AACH,YAAMlC,gBAAgB,CAACyB,MAAjB,CAAwBT,IAAxB,EAA8BK,IAA9B,CAAoCC,GAAD,IAAS;AAC9C,YAAIA,GAAG,CAACN,IAAJ,CAASoB,OAAT,IAAoB,IAAxB,EAA8B;AAC1B;AACAnC,UAAAA,IAAI,CAACyB,IAAL,CAAU;AACNC,YAAAA,KAAK,EAAE,IADD;AAENC,YAAAA,KAAK,EAAE,qBAFD;AAGNC,YAAAA,QAAQ,EAAE,SAHJ;AAINC,YAAAA,IAAI,EAAE,SAJA;AAKNC,YAAAA,iBAAiB,EAAE,KALb;AAMNC,YAAAA,KAAK,EAAE;AAND,WAAV;AAQAb,UAAAA,OAAO,GAAC,IAAR;AACH;AACJ,OAbK,EAaHc,KAbG,CAaIC,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAe,kCAAgCA,KAA/C,CAbd,CAAN;AAcH;;AACD,WAAOf,OAAP;AACH;;AArDqB;;AAyD1B,eAAe,IAAIjB,mBAAJ,EAAf","sourcesContent":["import ProfessionalService from '../services/professional.service';\nimport TimetableService from '../services/timetable.service';\nimport Swal from 'sweetalert2';\n\nclass timetableController {\n    constructor() {\n    }\n\n    handleChange = async (time, day, dayData) => {\n        if (time == null) return;\n        const filteredTime = await String(time).match(/\\d{2}:\\d{2}/g)[0];\n        if (day == \"from\") {\n            dayData.myDateFrom = time;\n            dayData.from = filteredTime;\n        } else if (day == \"to\") {\n            dayData.myDateTo = time;\n            dayData.to = filteredTime;\n        }\n        return dayData;\n    }\n\n    async updateTimetable(data,tableId,myUser) {\n        let updated = false;\n        if (tableId == null) {\n            await TimetableService.create(data).then((res) => {\n                myUser.timetableId = res.data.id;\n                ProfessionalService.update(myUser).then(() => {\n                    Swal.fire({\n                        toast: true,\n                        title: \"Horario actualizado\",\n                        position: 'top-end',\n                        icon: 'success',\n                        showConfirmButton: false,\n                        timer: 2000\n                    });\n                    updated=true;\n                    //this.setState({ reloadTable: true })\n                }).catch((error) => console.error (\"error creating timetable \"+error)) ;\n\n            }).catch((error) => console.error (\"error creating timetable \"+error)) \n        } else {\n            await TimetableService.update(data).then((res) => {\n                if (res.data.success == true) {\n                    //this.setState({ reloadTable: true })\n                    Swal.fire({\n                        toast: true,\n                        title: \"Horario actualizado\",\n                        position: 'top-end',\n                        icon: 'success',\n                        showConfirmButton: false,\n                        timer: 2000\n                    });\n                    updated=true;\n                }\n            }).catch((error) => console.error (\"error actualizando timetable \"+error)) ;\n        }\n        return updated;\n    }\n\n}\n\nexport default new timetableController();"]},"metadata":{},"sourceType":"module"}