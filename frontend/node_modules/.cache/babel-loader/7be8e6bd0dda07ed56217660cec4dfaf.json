{"ast":null,"code":"var _jsxFileName = \"/Users/trabajo/Desktop/ELRINCON/react-rincon/src/controllers/dateController.js\";\nimport DateService from '../services/date.service';\nimport React, { Component } from 'react';\n\nclass DateController {\n  constructor() {\n    this.state = {}; // We add addDays to DATE\n\n    Date.prototype.addDays = function (days) {\n      var date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    };\n  }\n\n  async showTodayDates(daysToQuery, id) {\n    const myDates = [];\n    let aux = daysToQuery;\n\n    if (aux.length == 0) {\n      aux = [this.filterDate(new Date())];\n    }\n\n    async function asyncForEach(array, callback) {\n      for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n      }\n    }\n\n    await asyncForEach(aux, async each => {\n      await DateService.getDates({\n        id: id,\n        day: each\n      }).then(res => {\n        if (res.data.success) {\n          const data = res.data.data[0];\n          myDates.push({\n            dates: data\n          });\n        } else {\n          console.error('Error loading dates service');\n        }\n      }).catch(err => {\n        console.error('ERROR server' + err);\n      });\n    });\n    return myDates;\n  }\n\n  filterDate(day) {\n    return day.getFullYear() + '/' + (day.getMonth() + 1) + '/' + day.getDate();\n  }\n\n  getDaysToQuery(startDate, endDate) {\n    const days = [];\n    let eachDay = new Date(startDate.getTime());\n    let i = 1;\n    const finalDay = new Date(endDate.getTime()).addDays(1);\n\n    while (eachDay.getTime() <= finalDay) {\n      days.push(this.filterDate(eachDay));\n      eachDay = new Date(startDate.getTime()).addDays(i);\n      i++;\n    }\n\n    console.log(days);\n    return days;\n  }\n\n  loadFillData(dates) {\n    return Array.from(dates).map(each => {\n      if (each.dates) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }\n        }, each.dates.date), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }\n        }, each.dates.time), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }\n        }, each.dates.email), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }\n        }, each.dates.dateType.name));\n      }\n    });\n  }\n\n}\n\nexport default new DateController();","map":{"version":3,"sources":["/Users/trabajo/Desktop/ELRINCON/react-rincon/src/controllers/dateController.js"],"names":["DateService","React","Component","DateController","constructor","state","Date","prototype","addDays","days","date","valueOf","setDate","getDate","showTodayDates","daysToQuery","id","myDates","aux","length","filterDate","asyncForEach","array","callback","index","each","getDates","day","then","res","data","success","push","dates","console","error","catch","err","getFullYear","getMonth","getDaysToQuery","startDate","endDate","eachDay","getTime","i","finalDay","log","loadFillData","Array","from","map","time","email","dateType","name"],"mappings":"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","sourcesContent":["import DateService from '../services/date.service';\nimport React, { Component } from 'react';\n\nclass DateController {\n    constructor() {\n        this.state = {\n        }\n\n        // We add addDays to DATE\n        Date.prototype.addDays = function (days) {\n            var date = new Date(this.valueOf());\n            date.setDate(date.getDate() + days);\n            return date;\n        };\n    }\n\n    async showTodayDates(daysToQuery, id) {\n        const myDates = [];\n\n        let aux = daysToQuery;\n        if (aux.length == 0) {\n            aux = [this.filterDate(new Date())];\n        }\n\n        async function asyncForEach(array, callback) {\n            for (let index = 0; index < array.length; index++) {\n                await callback(array[index], index, array);\n            }\n        }\n\n        await asyncForEach(aux, async (each) => {\n            await DateService.getDates({ id: id, day: each })\n                .then(res => {\n                    if (res.data.success) {\n                        const data = res.data.data[0];\n                        myDates.push({ dates: data });\n                    } else {\n                        console.error('Error loading dates service');\n                    }\n                })\n                .catch(err => {\n                    console.error('ERROR server' + err);\n                });\n        });\n\n        return myDates;\n    }\n\n    filterDate(day) {\n        return day.getFullYear() + '/' + (day.getMonth() + 1) + '/' + day.getDate();\n    }\n\n    getDaysToQuery(startDate, endDate) {\n        const days = [];\n        let eachDay = new Date(startDate.getTime());\n        let i = 1;\n        const finalDay = new Date(endDate.getTime()).addDays(1);\n        while (eachDay.getTime() <= finalDay) {\n            days.push(this.filterDate(eachDay));\n            eachDay = new Date(startDate.getTime()).addDays(i);\n            i++;\n        }\n        console.log(days);\n        return days;\n    }\n\n    loadFillData(dates) {\n        return Array.from(dates).map(each => {\n            if (each.dates) {\n                return (\n                    <tr>\n                        <td>{each.dates.date}</td>\n                        <td>{each.dates.time}</td>\n                        <td>{each.dates.email}</td>\n                        <td>{each.dates.dateType.name}</td>\n                    </tr>\n                );\n            }\n        });\n    }\n}\n\nexport default new DateController();"]},"metadata":{},"sourceType":"module"}