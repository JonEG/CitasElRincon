{"ast":null,"code":"class DateController {\n  constructor() {}\n\n  async showTodayDates(daysToQuery, id) {\n    const myDates = [];\n    let aux = daysToQuery;\n\n    if (aux.length == 0) {\n      aux = [this.filterDate(new Date())];\n    }\n\n    async function asyncForEach(array, callback) {\n      for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n      }\n    }\n\n    await asyncForEach(aux, async each => {\n      await DateService.getDates({\n        id: id,\n        day: each\n      }).then(res => {\n        if (res.data.success) {\n          const data = res.data.data[0];\n          myDates.push({\n            dates: data\n          });\n        } else {\n          console.error('Error loading dates service');\n        }\n      }).catch(err => {\n        console.error('ERROR server' + err);\n      });\n    });\n    return myDates;\n  }\n\n  filterDate(day) {\n    return day.getFullYear() + '/' + (day.getMonth() + 1) + '/' + day.getDate();\n  }\n\n  getDaysToQuery(startDate, endDate) {\n    const days = [];\n    let eachDay = new Date(startDate.getTime());\n    let i = 1;\n    const finalDay = new Date(endDate.getTime());\n\n    while (eachDay.getTime() <= finalDay) {\n      days.push(this.filterDate(eachDay));\n      eachDay = new Date(startDate.getTime()).addDays(i);\n      i++;\n    }\n\n    return days;\n  }\n\n}\n\nexport default new DateController();","map":{"version":3,"sources":["/Users/trabajo/Desktop/ELRINCON/react-rincon/src/controllers/dateController.js"],"names":["DateController","constructor","showTodayDates","daysToQuery","id","myDates","aux","length","filterDate","Date","asyncForEach","array","callback","index","each","DateService","getDates","day","then","res","data","success","push","dates","console","error","catch","err","getFullYear","getMonth","getDate","getDaysToQuery","startDate","endDate","days","eachDay","getTime","i","finalDay","addDays"],"mappings":"AAAA,MAAMA,cAAN,CAAoB;AAChBC,EAAAA,WAAW,GAAE,CACZ;;AAED,QAAMC,cAAN,CAAsBC,WAAtB,EAAkCC,EAAlC,EAAsC;AAClC,UAAMC,OAAO,GAAG,EAAhB;AAEA,QAAIC,GAAG,GAAGH,WAAV;;AACA,QAAIG,GAAG,CAACC,MAAJ,IAAc,CAAlB,EAAqB;AACnBD,MAAAA,GAAG,GAAG,CAAC,KAAKE,UAAL,CAAgB,IAAIC,IAAJ,EAAhB,CAAD,CAAN;AACD;;AAED,mBAAeC,YAAf,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AAC5C,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,KAAK,CAACJ,MAAlC,EAA0CM,KAAK,EAA/C,EAAmD;AACjD,cAAMD,QAAQ,CAACD,KAAK,CAACE,KAAD,CAAN,EAAeA,KAAf,EAAsBF,KAAtB,CAAd;AACD;AACF;;AAED,UAAMD,YAAY,CAACJ,GAAD,EAAM,MAAOQ,IAAP,IAAgB;AACtC,YAAMC,WAAW,CAACC,QAAZ,CAAqB;AAAEZ,QAAAA,EAAE,EAAEA,EAAN;AAAUa,QAAAA,GAAG,EAAEH;AAAf,OAArB,EACHI,IADG,CACEC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,IAAJ,CAASC,OAAb,EAAsB;AACpB,gBAAMD,IAAI,GAAGD,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAc,CAAd,CAAb;AACAf,UAAAA,OAAO,CAACiB,IAAR,CAAa;AAAEC,YAAAA,KAAK,EAAEH;AAAT,WAAb;AACD,SAHD,MAGO;AACLI,UAAAA,OAAO,CAACC,KAAR,CAAc,6BAAd;AACD;AACF,OARG,EASHC,KATG,CASGC,GAAG,IAAI;AACZH,QAAAA,OAAO,CAACC,KAAR,CAAc,iBAAiBE,GAA/B;AACD,OAXG,CAAN;AAYD,KAbiB,CAAlB;AAeA,WAAOtB,OAAP;AACD;;AAEHG,EAAAA,UAAU,CAAES,GAAF,EAAO;AACb,WAAOA,GAAG,CAACW,WAAJ,KAAoB,GAApB,IAA2BX,GAAG,CAACY,QAAJ,KAAiB,CAA5C,IAAiD,GAAjD,GAAuDZ,GAAG,CAACa,OAAJ,EAA9D;AACH;;AAEDC,EAAAA,cAAc,CAAEC,SAAF,EAAYC,OAAZ,EAAqB;AAC/B,UAAMC,IAAI,GAAG,EAAb;AACA,QAAIC,OAAO,GAAG,IAAI1B,IAAJ,CAASuB,SAAS,CAACI,OAAV,EAAT,CAAd;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,UAAMC,QAAQ,GAAG,IAAI7B,IAAJ,CAASwB,OAAO,CAACG,OAAR,EAAT,CAAjB;;AACA,WAAOD,OAAO,CAACC,OAAR,MAAqBE,QAA5B,EAAsC;AACpCJ,MAAAA,IAAI,CAACZ,IAAL,CAAU,KAAKd,UAAL,CAAgB2B,OAAhB,CAAV;AACAA,MAAAA,OAAO,GAAG,IAAI1B,IAAJ,CAASuB,SAAS,CAACI,OAAV,EAAT,EAA8BG,OAA9B,CAAsCF,CAAtC,CAAV;AACAA,MAAAA,CAAC;AACF;;AACD,WAAOH,IAAP;AACD;;AAnDa;;AAuDpB,eAAe,IAAIlC,cAAJ,EAAf","sourcesContent":["class DateController{\n    constructor(){\n    }\n\n    async showTodayDates (daysToQuery,id) {\n        const myDates = [];\n    \n        let aux = daysToQuery;\n        if (aux.length == 0) {\n          aux = [this.filterDate(new Date())];\n        }\n    \n        async function asyncForEach (array, callback) {\n          for (let index = 0; index < array.length; index++) {\n            await callback(array[index], index, array);\n          }\n        }\n    \n        await asyncForEach(aux, async (each) => {\n          await DateService.getDates({ id: id, day: each })\n            .then(res => {\n              if (res.data.success) {\n                const data = res.data.data[0];\n                myDates.push({ dates: data });\n              } else {\n                console.error('Error loading dates service');\n              }\n            })\n            .catch(err => {\n              console.error('ERROR server' + err);\n            });\n        });\n    \n        return myDates;\n      }\n\n    filterDate (day) {\n        return day.getFullYear() + '/' + (day.getMonth() + 1) + '/' + day.getDate();\n    }\n\n    getDaysToQuery (startDate,endDate) {\n        const days = [];\n        let eachDay = new Date(startDate.getTime());\n        let i = 1;\n        const finalDay = new Date(endDate.getTime());\n        while (eachDay.getTime() <= finalDay) {\n          days.push(this.filterDate(eachDay));\n          eachDay = new Date(startDate.getTime()).addDays(i);\n          i++;\n        }\n        return days;\n      }\n\n}\n\nexport default new DateController();"]},"metadata":{},"sourceType":"module"}