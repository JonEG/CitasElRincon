{"ast":null,"code":"var _jsxFileName = \"/Users/trabajo/Desktop/ELRINCON/react-rincon/src/controllers/dateController.js\";\nimport DateService from '../services/date.service';\nimport React, { Component } from 'react';\n\nclass DateController {\n  constructor() {\n    this.state = {}; // We add addDays to DATE\n\n    Date.prototype.addDays = function (days) {\n      var date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    };\n  }\n\n  async showTodayDates(daysToQuery, id) {\n    const myDates = [];\n    let aux = daysToQuery;\n\n    if (aux.length == 0) {\n      aux = [this.filterDate(new Date())];\n    }\n\n    async function asyncForEach(array, callback) {\n      for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n      }\n    }\n\n    await asyncForEach(aux, async each => {\n      await DateService.getDates({\n        id: id,\n        day: each\n      }).then(res => {\n        if (res.data.success) {\n          const data = res.data.data[0];\n          myDates.push({\n            dates: data\n          });\n        } else {\n          console.error('Error loading dates service');\n        }\n      }).catch(err => {\n        console.error('ERROR server' + err);\n      });\n    });\n    console.log(myDates);\n    return myDates;\n  }\n\n  filterDate(day) {\n    return day.getFullYear() + '/' + (day.getMonth() + 1) + '/' + day.getDate();\n  }\n\n  getDaysToQuery(startDate, endDate) {\n    const days = [];\n    let eachDay = new Date(startDate.getTime());\n    let i = 1;\n    const finalDay = new Date(endDate.getTime()).addDays(1);\n\n    while (eachDay.getTime() <= finalDay) {\n      days.push(this.filterDate(eachDay));\n      eachDay = new Date(startDate.getTime()).addDays(i);\n      i++;\n    }\n\n    console.log(days);\n    return days;\n  }\n\n  loadFillData(dates) {\n    return Array.from(dates).map(each => {\n      if (each.dates) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }\n        }, each.dates.date), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }\n        }, each.dates.time), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }\n        }, each.dates.email), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }\n        }, each.dates.dateType.name));\n      }\n    });\n  }\n\n}\n\nexport default new DateController();","map":{"version":3,"sources":["/Users/trabajo/Desktop/ELRINCON/react-rincon/src/controllers/dateController.js"],"names":["DateService","React","Component","DateController","constructor","state","Date","prototype","addDays","days","date","valueOf","setDate","getDate","showTodayDates","daysToQuery","id","myDates","aux","length","filterDate","asyncForEach","array","callback","index","each","getDates","day","then","res","data","success","push","dates","console","error","catch","err","log","getFullYear","getMonth","getDaysToQuery","startDate","endDate","eachDay","getTime","i","finalDay","loadFillData","Array","from","map","time","email","dateType","name"],"mappings":";AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,GAAI;AACb,SAAKC,KAAL,GAAa,EAAb,CADa,CAIb;;AACAC,IAAAA,IAAI,CAACC,SAAL,CAAeC,OAAf,GAAyB,UAAUC,IAAV,EAAgB;AACvC,UAAIC,IAAI,GAAG,IAAIJ,IAAJ,CAAS,KAAKK,OAAL,EAAT,CAAX;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,KAAiBJ,IAA9B;AACA,aAAOC,IAAP;AACD,KAJD;AAKD;;AAED,QAAMI,cAAN,CAAsBC,WAAtB,EAAmCC,EAAnC,EAAuC;AACrC,UAAMC,OAAO,GAAG,EAAhB;AAEA,QAAIC,GAAG,GAAGH,WAAV;;AACA,QAAIG,GAAG,CAACC,MAAJ,IAAc,CAAlB,EAAqB;AACnBD,MAAAA,GAAG,GAAG,CAAC,KAAKE,UAAL,CAAgB,IAAId,IAAJ,EAAhB,CAAD,CAAN;AACD;;AAED,mBAAee,YAAf,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AAC5C,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,KAAK,CAACH,MAAlC,EAA0CK,KAAK,EAA/C,EAAmD;AACjD,cAAMD,QAAQ,CAACD,KAAK,CAACE,KAAD,CAAN,EAAeA,KAAf,EAAsBF,KAAtB,CAAd;AACD;AACF;;AAED,UAAMD,YAAY,CAACH,GAAD,EAAM,MAAOO,IAAP,IAAgB;AACtC,YAAMzB,WAAW,CAAC0B,QAAZ,CAAqB;AAAEV,QAAAA,EAAE,EAAEA,EAAN;AAAUW,QAAAA,GAAG,EAAEF;AAAf,OAArB,EACHG,IADG,CACEC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,IAAJ,CAASC,OAAb,EAAsB;AACpB,gBAAMD,IAAI,GAAGD,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAc,CAAd,CAAb;AACAb,UAAAA,OAAO,CAACe,IAAR,CAAa;AAAEC,YAAAA,KAAK,EAAEH;AAAT,WAAb;AACD,SAHD,MAGO;AACLI,UAAAA,OAAO,CAACC,KAAR,CAAc,6BAAd;AACD;AACF,OARG,EASHC,KATG,CASGC,GAAG,IAAI;AACZH,QAAAA,OAAO,CAACC,KAAR,CAAc,iBAAiBE,GAA/B;AACD,OAXG,CAAN;AAYD,KAbiB,CAAlB;AAcAH,IAAAA,OAAO,CAACI,GAAR,CAAYrB,OAAZ;AACA,WAAOA,OAAP;AACD;;AAEDG,EAAAA,UAAU,CAAEO,GAAF,EAAO;AACf,WAAOA,GAAG,CAACY,WAAJ,KAAoB,GAApB,IAA2BZ,GAAG,CAACa,QAAJ,KAAiB,CAA5C,IAAiD,GAAjD,GAAuDb,GAAG,CAACd,OAAJ,EAA9D;AACD;;AAED4B,EAAAA,cAAc,CAAEC,SAAF,EAAaC,OAAb,EAAsB;AAClC,UAAMlC,IAAI,GAAG,EAAb;AACA,QAAImC,OAAO,GAAG,IAAItC,IAAJ,CAASoC,SAAS,CAACG,OAAV,EAAT,CAAd;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,UAAMC,QAAQ,GAAG,IAAIzC,IAAJ,CAASqC,OAAO,CAACE,OAAR,EAAT,EAA4BrC,OAA5B,CAAoC,CAApC,CAAjB;;AACA,WAAOoC,OAAO,CAACC,OAAR,MAAqBE,QAA5B,EAAsC;AACpCtC,MAAAA,IAAI,CAACuB,IAAL,CAAU,KAAKZ,UAAL,CAAgBwB,OAAhB,CAAV;AACAA,MAAAA,OAAO,GAAG,IAAItC,IAAJ,CAASoC,SAAS,CAACG,OAAV,EAAT,EAA8BrC,OAA9B,CAAsCsC,CAAtC,CAAV;AACAA,MAAAA,CAAC;AACF;;AACDZ,IAAAA,OAAO,CAACI,GAAR,CAAY7B,IAAZ;AACA,WAAOA,IAAP;AACD;;AAEDuC,EAAAA,YAAY,CAAEf,KAAF,EAAS;AACnB,WAAOgB,KAAK,CAACC,IAAN,CAAWjB,KAAX,EAAkBkB,GAAlB,CAAsB1B,IAAI,IAAI;AACnC,UAAIA,IAAI,CAACQ,KAAT,EAAgB;AACd,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKR,IAAI,CAACQ,KAAL,CAAWvB,IAAhB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKe,IAAI,CAACQ,KAAL,CAAWmB,IAAhB,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK3B,IAAI,CAACQ,KAAL,CAAWoB,KAAhB,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK5B,IAAI,CAACQ,KAAL,CAAWqB,QAAX,CAAoBC,IAAzB,CAJF,CADF;AAQD;AACF,KAXM,CAAP;AAYD;;AA5EkB;;AA+ErB,eAAe,IAAIpD,cAAJ,EAAf","sourcesContent":["import DateService from '../services/date.service';\nimport React, { Component } from 'react';\n\nclass DateController {\n  constructor () {\n    this.state = {\n    };\n\n    // We add addDays to DATE\n    Date.prototype.addDays = function (days) {\n      var date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    };\n  }\n\n  async showTodayDates (daysToQuery, id) {\n    const myDates = [];\n\n    let aux = daysToQuery;\n    if (aux.length == 0) {\n      aux = [this.filterDate(new Date())];\n    }\n\n    async function asyncForEach (array, callback) {\n      for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n      }\n    }\n\n    await asyncForEach(aux, async (each) => {\n      await DateService.getDates({ id: id, day: each })\n        .then(res => {\n          if (res.data.success) {\n            const data = res.data.data[0];\n            myDates.push({ dates: data });\n          } else {\n            console.error('Error loading dates service');\n          }\n        })\n        .catch(err => {\n          console.error('ERROR server' + err);\n        });\n    });\n    console.log(myDates);\n    return myDates;\n  }\n\n  filterDate (day) {\n    return day.getFullYear() + '/' + (day.getMonth() + 1) + '/' + day.getDate();\n  }\n\n  getDaysToQuery (startDate, endDate) {\n    const days = [];\n    let eachDay = new Date(startDate.getTime());\n    let i = 1;\n    const finalDay = new Date(endDate.getTime()).addDays(1);\n    while (eachDay.getTime() <= finalDay) {\n      days.push(this.filterDate(eachDay));\n      eachDay = new Date(startDate.getTime()).addDays(i);\n      i++;\n    }\n    console.log(days);\n    return days;\n  }\n\n  loadFillData (dates) {\n    return Array.from(dates).map(each => {\n      if (each.dates) {\n        return (\n          <tr>\n            <td>{each.dates.date}</td>\n            <td>{each.dates.time}</td>\n            <td>{each.dates.email}</td>\n            <td>{each.dates.dateType.name}</td>\n          </tr>\n        );\n      }\n    });\n  }\n}\n\nexport default new DateController();\n"]},"metadata":{},"sourceType":"module"}